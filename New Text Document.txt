import streamlit as st
import pandas as pd
import time

# --- Page Configuration ---
st.set_page_config(
    page_title="AI Virtual Assistant for INGRES",
    page_icon="ЁЯТз",
    layout="wide"
)

# --- Language Definitions ---
LANGUAGES = {
    "en": "English",
    "hi": "рд╣рд┐рдиреНрджреА (Hindi)",
    "ta": "родрооро┐ро┤рпН (Tamil)",
    "te": "р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)",
    "bn": "ржмрж╛ржВрж▓рж╛ (Bangla)",
    "mr": "рдорк░рк╛рдареА (Marathi)",
    "gu": "ркЧрлБркЬрк░рк╛ркдрлА (Gujarati)",
    "kn": "р▓Хр▓ир│Нр▓ир▓б (Kannada)",
    "ml": "р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)",
    "pa": "рикрй░риЬри╛римрйА (Punjabi)",
    "or": "рмУрмбрм╝рм┐рмЖ (Odia)"
}

# --- Translations & Mock Database ---
MOCK_DATA = {
    'en': {
        'page_title': "AI Virtual Assistant for INGRES",
        'chat_title': 'Groundwater Insights ChatBOT',
        'suggestions_label': 'Try these examples:',
        'placeholder': 'Ask about groundwater resources...',
        'welcome': "Hello! I am your AI assistant for INGRES. How can I help you access India's groundwater data today?",
        'error': "I'm sorry, I couldn't find information for that specific query. Please try again.",
        'viz_title': "Data Visualizations",
        'viz_placeholder': "Interactive charts and maps will appear here.",
        'suggestion_1': "Status in Pune, Maharashtra",
        'suggestion_2': "Compare 2023 vs 2024 in Tamil Nadu",
        'suggestion_3': "Map of over-exploited zones",
        'responses': [
            {"keywords": ["status", "pune"], "response": "The groundwater status for Pune is 'Over-exploited'. The LGD is 125%.", "viz": {"type": "bar", "data": pd.DataFrame({"Category": ['Annual Recharge', 'Annual Extraction'], "Value (BCM)": [1.2, 1.5]})}},
            {"keywords": ["map", "over-exploited"], "response": "Displaying a map of over-exploited zones in North-West India.", "viz": {"type": "map", "data": pd.DataFrame({'lat': [30.90, 28.45, 26.91], 'lon': [75.85, 77.02, 75.78]})}},
            {"keywords": ["compare", "tamil nadu"], "response": "Here is a comparison of the total extractable groundwater resources in Tamil Nadu for recent years.", "viz": {"type": "line", "data": pd.DataFrame({"Year": ['2020', '2021', '2022', '2023', '2024'], "Resources (BCM)": [22.5, 22.1, 22.3, 21.8, 21.5]})}}
        ]
    },
    'hi': {'page_title': "INGRES рдХреЗ рд▓рд┐рдП AI рд╡рд░реНрдЪреБрдЕрд▓ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ", 'chat_title': 'рднреВрдЬрд▓ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдЪреИрдЯрдмреЙрдЯ', 'suggestions_label': 'рдЗрди рдЙрджрд╛рд╣рд░рдгреЛрдВ рдХреЛ рдЖрдЬрдорд╛рдПрдВ:', 'placeholder': 'рднреВрдЬрд▓ рд╕рдВрд╕рд╛рдзрдиреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ...', 'welcome': "рдирдорд╕реНрддреЗ! рдореИрдВ INGRES рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ AI рд╕рд╣рд╛рдпрдХ рд╣реВрдБред", 'error': "рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рдореБрдЭреЗ рдЙрд╕ рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рдорд┐рд▓реАред", 'viz_title': "рдбреЗрдЯрд╛ рд╡рд┐рдЬрд╝реБрдЕрд▓рд╛рдЗрдЬрд╝реЗрд╢рди", 'viz_placeholder': "рдЪрд╛рд░реНрдЯ рдФрд░ рдирдХреНрд╢реЗ рдпрд╣рд╛рдВ рджрд┐рдЦрд╛рдИ рджреЗрдВрдЧреЗред", 'suggestion_1': "рдкреБрдгреЗ, рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░ рдореЗрдВ рд╕реНрдерд┐рддрд┐", 'suggestion_2': "рддрдорд┐рд▓рдирд╛рдбреБ рдореЗрдВ рддреБрд▓рдирд╛ рдХрд░реЗрдВ", 'suggestion_3': "рдЕрддрд┐-рд╢реЛрд╖рд┐рдд рдХреНрд╖реЗрддреНрд░реЛрдВ рдХрд╛ рдирдХреНрд╢рд╛", 'responses': [{"keywords": ["рд╕реНрдерд┐рддрд┐", "рдкреБрдгреЗ"], "response": "рдкреБрдгреЗ рдореЗрдВ рднреВрдЬрд▓ рдХреА рд╕реНрдерд┐рддрд┐ 'рдЕрддрд┐-рд╢реЛрд╖рд┐рдд' рд╣реИред LGD 125% рд╣реИред", "viz": {"type": "bar", "data": pd.DataFrame({"рд╡рд░реНрдЧ": ['рд╡рд╛рд░реНрд╖рд┐рдХ рдкреБрдирд░реНрднрд░рдг', 'рд╡рд╛рд░реНрд╖рд┐рдХ рдирд┐рдХрд╛рд╕реА'], "рдорд╛рди (BCM)": [1.2, 1.5]})}}]},
    'ta': {'page_title': "INGRES-роХрпНроХро╛рой AI роорпЖропрпНроиро┐роХро░рпН роЙродро╡ро┐ропро╛ро│ро░рпН", 'welcome': "ро╡рогроХрпНроХроорпН! роиро╛ройрпН INGRES-роХрпНроХро╛рой роЙроЩрпНроХро│рпН AI роЙродро╡ро┐ропро╛ро│ро░рпН.", 'responses': []},
    'te': {'page_title': "INGRES р░Хр▒Лр░╕р░В AI р░╡р░░р▒Нр░Ър▒Бр░╡р░▓р▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н", 'welcome': "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б INGRES р░Хр▒Лр░╕р░В р░ор▒А AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐.", 'responses': []},
    'bn': {'page_title': "INGRES-ржПрж░ ржЬржирзНржп AI ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ рж╕рж╣ржХрж╛рж░рзА", 'welcome': "ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ INGRES-ржПрж░ ржЬржирзНржп ржЖржкржирж╛рж░ AI рж╕рж╣ржХрж╛рж░рзАред", 'responses': []},
    'mr': {'page_title': "INGRES рд╕рд╛рдареА AI рд╡реНрд╣рд░реНрдЪреНрдпреБрдЕрд▓ рдЕрд╕рд┐рд╕реНрдЯрдВрдЯ", 'welcome': "рдирдорд╕реНрдХрд╛рд░! рдореА INGRES рд╕рд╛рдареА рддреБрдордЪрд╛ AI рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ.", 'responses': []},
    'gu': {'page_title': "INGRES ркорк╛ркЯрлЗ AI рк╡рк░рлНркЪрлНркпрлБркЕрк▓ рк╕рк╣рк╛ркпркХ", 'welcome': "ркиркорк╕рлНркдрлЗ! рк╣рлБркВ INGRES ркорк╛ркЯрлЗ ркдркорк╛рк░рлЛ AI рк╕рк╣рк╛ркпркХ ркЫрлБркВ.", 'responses': []},
    'kn': {'page_title': "INGRES р▓Чр▓╛р▓Чр▓┐ AI р▓╡р▓░р│Нр▓Ър│Бр▓╡р▓▓р│Н р▓╕р▓╣р▓╛р▓пр▓Х", 'welcome': "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б INGRES р▓Чр▓╛р▓Чр▓┐ р▓ир▓┐р▓ор│Нр▓о AI р▓╕р▓╣р▓╛р▓пр▓Х.", 'responses': []},
    'ml': {'page_title': "INGRES-р┤ир┤╛р┤пр╡Бр┤│р╡Нр┤│ AI р┤╡р╡Жр╡╝р┤Ър╡Нр┤╡р╡╜ р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р╡Н", 'welcome': "р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! р┤Юр┤╛р╡╗ INGRES-р┤ир┤╛р┤пр╡Бр┤│р╡Нр┤│ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж AI р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р┤╛р┤гр╡Н.", 'responses': []},
    'pa': {'page_title': "INGRES ри▓риИ AI ри╡ри░риЪрйБриЕри▓ риЕри╕ри┐ри╕риЯрйИриВриЯ", 'welcome': "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ INGRES ри▓риИ ридрйБри╣ри╛рибри╛ AI ри╕ри╣ри╛риЗриХ ри╣ри╛риВред", 'responses': []},
    'or': {'page_title': "INGRES рмкрм╛рмЗрмБ AI рмнрм░рнНрмЪрнБрмЖрм▓рнН рмЖрм╕рм┐рм╖рнНрмЯрм╛рмгрнНрмЯ", 'welcome': "рмирморм╕рнНрмХрм╛рм░! рморнБрмБ INGRES рмкрм╛рмЗрмБ рмЖрмкрмгрмЩрнНрмХрм░ AI рм╕рм╣рм╛рнЯрмХред", 'responses': []}
}

for lang_code, lang_data in MOCK_DATA.items():
    if lang_code != 'en':
        for key, value in MOCK_DATA['en'].items():
            if key not in lang_data:
                lang_data[key] = value

if 'messages' not in st.session_state: st.session_state.messages = []
if 'lang' not in st.session_state: st.session_state.lang = 'en'
if 'current_viz' not in st.session_state: st.session_state.current_viz = None

def t(key):
    return MOCK_DATA[st.session_state.lang].get(key, MOCK_DATA['en'].get(key, key))

# --- FEATURE: Onboarding Tutorial ---
if 'has_seen_tutorial' not in st.session_state:
    with st.expander("ЁЯСЛ Welcome! Here's how to use the Chatbot:", expanded=True):
        st.info("1. **Ask a question** in the text box at the bottom.")
        st.info("2. **Use the examples** below the chat for ideas.")
        st.info("3. **Interact with charts and maps** that appear on the right.")
        if st.button("Got it!"):
            st.session_state.has_seen_tutorial = True
            st.rerun()

# --- Header ---
col1, col2 = st.columns([3, 1])
with col1:
    st.markdown(f"""<h1 style="margin: 0; display: flex; align-items: center; gap: 15px;">
        <img src="https://placehold.co/60x60/3B82F6/FFFFFF?text=INGRES" style="border-radius: 50%;">
        {t('page_title')}</h1>""", unsafe_allow_html=True)
with col2:
    lang_options = list(LANGUAGES.values())
    current_lang_name = LANGUAGES[st.session_state.lang]
    selected_lang_index = lang_options.index(current_lang_name)
    lang_choice = st.selectbox("Language / рднрд╛рд╖рд╛", lang_options, index=selected_lang_index, label_visibility="collapsed")
    new_lang_code = next((code for code, name in LANGUAGES.items() if name == lang_choice), 'en')
    if new_lang_code != st.session_state.lang:
        st.session_state.lang = new_lang_code
        st.session_state.messages = []
        st.session_state.current_viz = None
        st.rerun()
st.markdown("<hr>", unsafe_allow_html=True)

# --- Main Content ---
chat_col, viz_col = st.columns(2)
with chat_col:
    st.header(t('chat_title'))
    chat_container = st.container(height=400, border=True)
    with chat_container:
        if not st.session_state.messages:
            with st.chat_message("assistant"):
                st.write(t('welcome'))
        
        for i, message in enumerate(st.session_state.messages):
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                
                # --- FEATURE: Feedback Buttons ---
                # Show feedback buttons only for the last assistant message
                if message["role"] == "assistant" and i == len(st.session_state.messages) - 1:
                    feedback_cols = st.columns([1, 1, 8])
                    if feedback_cols[0].button("ЁЯСН", key=f"helpful_{i}"):
                        st.toast("Thanks for your feedback!")
                        # In a real app, you would log this feedback to a database
                    if feedback_cols[1].button("ЁЯСО", key=f"unhelpful_{i}"):
                        st.toast("Thanks! We'll use this to improve.")

    st.write(t('suggestions_label'))
    s_col1, s_col2, s_col3 = st.columns(3)
    suggestion_buttons = {s_col1: t('suggestion_1'), s_col2: t('suggestion_2'), s_col3: t('suggestion_3')}
    user_prompt_suggestion = None
    for col, text in suggestion_buttons.items():
        if col.button(text, use_container_width=True):
            user_prompt_suggestion = text

with viz_col:
    viz_area = st.container(border=True)
    with viz_area:
        if st.session_state.current_viz is None:
            st.markdown(f"""<div style="text-align: center; padding: 5rem 1rem;">
                <span style="font-size: 4rem;">ЁЯУК</span><h3>{t('viz_title')}</h3><p>{t('viz_placeholder')}</p>
                </div>""", unsafe_allow_html=True)
        else:
            viz_type = st.session_state.current_viz['type']
            viz_data = st.session_state.current_viz['data']
            if viz_type == 'bar':
                st.bar_chart(viz_data, x='Category', y='Value (BCM)')
            elif viz_type == 'line':
                st.line_chart(viz_data, x="Year", y="Resources (BCM)")
            elif viz_type == 'map':
                st.map(viz_data, zoom=5, use_container_width=True)
            
            # --- FEATURE: Download Button ---
            if isinstance(viz_data, pd.DataFrame):
                csv = viz_data.to_csv(index=False).encode('utf-8')
                st.download_button(
                   label="ЁЯУД Download Data as CSV",
                   data=csv,
                   file_name='ingres_data.csv',
                   mime='text/csv',
                   use_container_width=True,
                   key='download_button'
                )

def get_bot_response(query):
    query = query.lower()
    possible_responses = t('responses')
    if not possible_responses: return t('error'), None
    for item in possible_responses:
        if all(keyword.lower() in query for keyword in item["keywords"]):
            return item["response"], item.get("viz")
    return t('error'), None

prompt = st.chat_input(t('placeholder')) or user_prompt_suggestion

if prompt:
    st.session_state.messages.append({"role": "user", "content": prompt})
    response_text, viz_data = get_bot_response(prompt)
    st.session_state.current_viz = viz_data
    st.session_state.messages.append({"role": "assistant", "content": response_text})
    st.rerun()

st.markdown("<hr style='margin-top: 2rem;'>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: grey;'>┬й 2025 | Data Source: INGRES Portal</p>", unsafe_allow_html=True)