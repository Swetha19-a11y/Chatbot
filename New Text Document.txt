import streamlit as st
import pandas as pd
import time

# --- Page Configuration ---
st.set_page_config(
    page_title="AI Virtual Assistant for INGRES",
    page_icon="ЁЯТз",
    layout="wide"
)

# --- Language Definitions ---
LANGUAGES = {
    "en": "English",
    "hi": "рд╣рд┐рдиреНрджреА (Hindi)",
    "ta": "родрооро┐ро┤рпН (Tamil)",
    "te": "р░др▒Жр░▓р▒Бр░Чр▒Б (Telugu)",
    "bn": "ржмрж╛ржВрж▓рж╛ (Bangla)",
    "mr": "рдорд░рд╛рдареА (Marathi)",
    "gu": "ркЧрлБркЬрк░рк╛ркдрлА (Gujarati)",
    "kn": "р▓Хр▓ир│Нр▓ир▓б (Kannada)",
    "ml": "р┤ор┤▓р┤пр┤╛р┤│р┤В (Malayalam)",
    "pa": "рикрй░риЬри╛римрйА (Punjabi)",
    "or": "рмУрмбрм╝рм┐рмЖ (Odia)"
}

# --- Translations & Mock Database (NOW FULLY POPULATED) ---
MOCK_DATA = {
    'en': {
        'page_title': "AI Virtual Assistant for INGRES", 'chat_title': 'Groundwater Insights ChatBOT', 'suggestions_label': 'Try these examples:', 'placeholder': 'Ask about groundwater resources...', 'welcome': "Hello! I am your AI assistant for INGRES. How can I help you access India's groundwater data today?", 'error': "I'm sorry, I couldn't find information for that specific query. Please try again.", 'viz_title': "Data Visualizations", 'viz_placeholder': "Interactive charts and maps will appear here.", 'suggestion_1': "Status in Pune, Maharashtra", 'suggestion_2': "Compare 2023 vs 2024 in Tamil Nadu", 'suggestion_3': "Map of over-exploited zones",
        'responses': [
            {"keywords": ["status", "pune"], "response": "The groundwater status for Pune is 'Over-exploited'. The LGD is 125%.", "viz": {"type": "bar", "data": pd.DataFrame({"Category": ['Annual Recharge', 'Annual Extraction'], "Value (BCM)": [1.2, 1.5]})}},
            {"keywords": ["map", "over-exploited"], "response": "Displaying a map of over-exploited zones in North-West India.", "viz": {"type": "map", "data": pd.DataFrame({'lat': [30.90, 28.45, 26.91], 'lon': [75.85, 77.02, 75.78]})}},
            {"keywords": ["compare", "tamil nadu"], "response": "Here is a comparison of the total extractable groundwater resources in Tamil Nadu for recent years.", "viz": {"type": "line", "data": pd.DataFrame({"Year": ['2020', '2021', '2022', '2023', '2024'], "Resources (BCM)": [22.5, 22.1, 22.3, 21.8, 21.5]})}}
        ]
    },
    'hi': {
        'page_title': "INGRES рдХреЗ рд▓рд┐рдП AI рд╡рд░реНрдЪреБрдЕрд▓ рдЕрд╕рд┐рд╕реНрдЯреЗрдВрдЯ", 'chat_title': 'рднреВрдЬрд▓ рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдЪреИрдЯрдмреЙрдЯ', 'suggestions_label': 'рдЗрди рдЙрджрд╛рд╣рд░рдгреЛрдВ рдХреЛ рдЖрдЬрдорд╛рдПрдВ:', 'placeholder': 'рднреВрдЬрд▓ рд╕рдВрд╕рд╛рдзрдиреЛрдВ рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдкреВрдЫреЗрдВ...', 'welcome': "рдирдорд╕реНрддреЗ! рдореИрдВ INGRES рдХреЗ рд▓рд┐рдП рдЖрдкрдХрд╛ AI рд╕рд╣рд╛рдпрдХ рд╣реВрдБред", 'error': "рдореБрдЭреЗ рдЦреЗрдж рд╣реИ, рдореБрдЭреЗ рдЙрд╕ рдкреНрд░рд╢реНрди рдХреЗ рд▓рд┐рдП рдЬрд╛рдирдХрд╛рд░реА рдирд╣реАрдВ рдорд┐рд▓реАред", 'viz_title': "рдбреЗрдЯрд╛ рд╡рд┐рдЬрд╝реБрдЕрд▓рд╛рдЗрдЬрд╝реЗрд╢рди", 'viz_placeholder': "рдЪрд╛рд░реНрдЯ рдФрд░ рдирдХреНрд╢реЗ рдпрд╣рд╛рдВ рджрд┐рдЦрд╛рдИ рджреЗрдВрдЧреЗред", 'suggestion_1': "рдкреБрдгреЗ, рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░ рдореЗрдВ рд╕реНрдерд┐рддрд┐", 'suggestion_2': "рддрдорд┐рд▓рдирд╛рдбреБ рдореЗрдВ рддреБрд▓рдирд╛ рдХрд░реЗрдВ", 'suggestion_3': "рдЕрддрд┐-рд╢реЛрд╖рд┐рдд рдХреНрд╖реЗрддреНрд░реЛрдВ рдХрд╛ рдирдХреНрд╢рд╛",
        'responses': [{"keywords": ["рд╕реНрдерд┐рддрд┐", "рдкреБрдгреЗ"], "response": "рдкреБрдгреЗ рдореЗрдВ рднреВрдЬрд▓ рдХреА рд╕реНрдерд┐рддрд┐ 'рдЕрддрд┐-рд╢реЛрд╖рд┐рдд' рд╣реИред LGD 125% рд╣реИред", "viz": {"type": "bar", "data": pd.DataFrame({"рд╡рд░реНрдЧ": ['рд╡рд╛рд░реНрд╖рд┐рдХ рдкреБрдирд░реНрднрд░рдг', 'рд╡рд╛рд░реНрд╖рд┐рдХ рдирд┐рдХрд╛рд╕реА'], "рдорд╛рди (BCM)": [1.2, 1.5]})}}]
    },
    'ta': {
        'page_title': "INGRES-роХрпНроХро╛рой AI роорпЖропрпНроиро┐роХро░рпН роЙродро╡ро┐ропро╛ро│ро░рпН", 'chat_title': 'роиро┐ро▓родрпНродроЯро┐ роирпАро░рпН роирпБрогрпНрогро▒ро┐ро╡рпБ роЕро░роЯрпНроЯрпИрокрпНрокрпЖроЯрпНроЯро┐', 'suggestions_label': 'роЗроирпНрод роЙродро╛ро░рогроЩрпНроХро│рпИ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН:', 'placeholder': 'роиро┐ро▓родрпНродроЯро┐ роирпАро░рпН роЖродро╛ро░роЩрпНроХро│рпН рокро▒рпНро▒ро┐ роХрпЗроЯрпНроХро╡рпБроорпН...', 'welcome': "ро╡рогроХрпНроХроорпН! роиро╛ройрпН INGRES-роХрпНроХро╛рой роЙроЩрпНроХро│рпН AI роЙродро╡ро┐ропро╛ро│ро░рпН.", 'error': "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роЕроирпНрод роХрпЗро│рпНро╡ро┐роХрпНроХрпБ роОройроХрпНроХрпБ родроХро╡ро▓рпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ.", 'viz_title': "родро░ро╡рпБ роХро╛роЯрпНроЪро┐роХро│рпН", 'viz_placeholder': "ро╡ро┐ро│роХрпНроХрокрпНрокроЯроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН ро╡ро░рпИрокроЯроЩрпНроХро│рпН роЗроЩрпНроХрпЗ родрпЛройрпНро▒рпБроорпН.", 'suggestion_1': "рокрпБройрпЗ, роороХро╛ро░ро╛ро╖рпНроЯро┐ро░ро╛ро╡ро┐ро▓рпН роиро┐ро▓рпИ", 'suggestion_2': "родрооро┐ро┤рпНроиро╛роЯрпНроЯро┐ро▓рпН роТрокрпНрокро┐роЯрпБроХ", 'suggestion_3': "роЕродро┐роХрооро╛роХ роЪрпБро░рогрпНроЯрокрпНрокроЯрпНроЯ роорогрпНроЯро▓роЩрпНроХро│ро┐ройрпН ро╡ро░рпИрокроЯроорпН",
        'responses': [{"keywords": ["роиро┐ро▓рпИ", "рокрпБройрпЗ"], "response": "рокрпБройрпЗропро┐ро▓рпН роиро┐ро▓родрпНродроЯро┐ роирпАро░рпН роиро┐ро▓рпИ 'роЕродро┐роХрооро╛роХ роЪрпБро░рогрпНроЯрокрпНрокроЯрпНроЯродрпБ'. LGD 125% роЖроХрпБроорпН.", "viz": {"type": "bar", "data": pd.DataFrame({"ро╡роХрпИ": ['роЖрогрпНроЯрпБ ро░рпАроЪро╛ро░рпНроЬрпН', 'роЖрогрпНроЯрпБ рокро┐ро░ро┐родрпНродрпЖроЯрпБродрпНродро▓рпН'], "роородро┐рокрпНрокрпБ (BCM)": [1.2, 1.5]})}}]
    },
    'te': {
        'page_title': "INGRES р░Хр▒Лр░╕р░В AI р░╡р░░р▒Нр░Ър▒Бр░╡р░▓р▒Н р░Ер░╕р░┐р░╕р▒Нр░Яр▒Жр░Вр░Яр▒Н", 'chat_title': 'р░нр▒Вр░Чр░░р▒Нр░н р░Ьр░▓р░╛р░▓ р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр░┐ р░Ър░╛р░Яр▒НтАМр░мр░╛р░Яр▒Н', 'suggestions_label': 'р░И р░Йр░жр░╛р░╣р░░р░гр░▓р░ир▒Б р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐:', 'placeholder': 'р░нр▒Вр░Чр░░р▒Нр░н р░Ьр░▓ р░╡р░ир░░р▒Бр░▓ р░Чр▒Бр░░р░┐р░Вр░Ър░┐ р░Ер░бр░Чр░Вр░бр░┐...', 'welcome': "р░ир░ор░╕р▒Нр░Хр░╛р░░р░В! р░ир▒Зр░ир▒Б INGRES р░Хр▒Лр░╕р░В р░ор▒А AI р░╕р░╣р░╛р░пр░Хр▒Бр░бр░┐р░ир░┐.", 'error': "р░Хр▒Нр░╖р░ор░┐р░Вр░Ър░Вр░бр░┐, р░Ж р░кр▒Нр░░р░╢р▒Нр░ир░Хр▒Б р░ир░╛р░Хр▒Б р░╕р░ор░╛р░Ър░╛р░░р░В р░жр▒Кр░░р░Хр░▓р▒Зр░жр▒Б.", 'viz_title': "р░бр▒Зр░Яр░╛ р░╡р░┐р░Ьр▒Бр░╡р░▓р▒Ир░Ьр▒Зр░╖р░ир▒Нр░▓р▒Б", 'viz_placeholder': 'р░Ър░╛р░░р▒Нр░Яр▒НтАМр░▓р▒Б р░ор░░р░┐р░пр▒Б р░ор▒Нр░пр░╛р░кр▒НтАМр░▓р▒Б р░Зр░Хр▒Нр░Хр░б р░Хр░ир░┐р░кр░┐р░╕р▒Нр░др░╛р░пр░┐.', 'suggestion_1': "р░кр▒Бр░гр▒Ж, р░ор░╣р░╛р░░р░╛р░╖р▒Нр░Яр▒Нр░░р░▓р▒Л р░╕р▒Нр░ер░┐р░др░┐", 'suggestion_2': "р░др░ор░┐р░│р░ир░╛р░бр▒Бр░▓р▒Л р░кр▒Лр░▓р▒Нр░Ър░Вр░бр░┐", 'suggestion_3': "р░Ер░др░┐р░Чр░╛ р░жр▒Лр░кр░┐р░бр▒Ар░Хр░┐ р░Чр▒Бр░░р▒Ир░и р░ор░Вр░бр░▓р░╛р░▓ р░ор▒Нр░пр░╛р░кр▒Н",
        'responses': [{"keywords": ["р░╕р▒Нр░ер░┐р░др░┐", "р░кр▒Бр░гр▒Ж"], "response": "р░кр▒Бр░гр▒Жр░▓р▒Л р░нр▒Вр░Чр░░р▒Нр░н р░Ьр░▓р░╛р░▓ р░╕р▒Нр░ер░┐р░др░┐ 'р░Ер░др░┐р░Чр░╛ р░жр▒Лр░кр░┐р░бр▒Ар░Хр░┐ р░Чр▒Бр░░р▒Ир░Вр░жр░┐'. LGD 125%.", "viz": {"type": "bar", "data": pd.DataFrame({"р░╡р░░р▒Нр░Чр░В": ['р░╡р░╛р░░р▒Нр░╖р░┐р░Х р░░р▒Ар░Ыр░╛р░░р▒Нр░Ьр▒Н', 'р░╡р░╛р░░р▒Нр░╖р░┐р░Х р░╕р░Вр░Чр▒Нр░░р░╣р░г'], "р░╡р░┐р░▓р▒Бр░╡ (BCM)": [1.2, 1.5]})}}]
    },
    'bn': {
        'page_title': "INGRES-ржПрж░ ржЬржирзНржп AI ржнрж╛рж░рзНржЪрзБржпрж╝рж╛рж▓ рж╕рж╣ржХрж╛рж░рзА", 'chat_title': 'ржнрзВржЧрж░рзНржнрж╕рзНрже ржЬрж▓ ржЕржирзНрждрж░рзНржжрзГрж╖рзНржЯрж┐ ржЪрзНржпрж╛ржЯржмржЯ', 'suggestions_label': 'ржПржЗ ржЙржжрж╛рж╣рж░ржгржЧрзБрж▓рж┐ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржи:', 'placeholder': 'ржнрзВржЧрж░рзНржнрж╕рзНрже ржЬрж▓рзЗрж░ рж╕ржорзНржкржж рж╕ржорзНржкрж░рзНржХрзЗ ржЬрж┐ржЬрзНржЮрж╛рж╕рж╛ ржХрж░рзБржи...', 'welcome': "ржиржорж╕рзНржХрж╛рж░! ржЖржорж┐ INGRES-ржПрж░ ржЬржирзНржп ржЖржкржирж╛рж░ AI рж╕рж╣ржХрж╛рж░рзАред", 'error': "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ рж╕рзЗржЗ ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржкрзНрж░рж╢рзНржирзЗрж░ ржЬржирзНржп рждржерзНржп ржЦрзБржБржЬрзЗ ржкрж╛ржЗржирж┐ред", 'viz_title': "ржбрзЗржЯрж╛ ржнрж┐ржЬрзНржпрзБржпрж╝рж╛рж▓рж╛ржЗржЬрзЗрж╢ржи", 'viz_placeholder': 'ржЗржирзНржЯрж╛рж░рзЗржХрзНржЯрж┐ржн ржЪрж╛рж░рзНржЯ ржПржмржВ ржорж╛ржиржЪрж┐рждрзНрж░ ржПржЦрж╛ржирзЗ ржЙржкрж╕рзНржерж┐ржд рж╣ржмрзЗред', 'suggestion_1': "ржкрзБржирзЗ, ржорж╣рж╛рж░рж╛рж╖рзНржЯрзНрж░рзЗрж░ ржЕржмрж╕рзНржерж╛", 'suggestion_2': "рждрж╛ржорж┐рж▓ржирж╛ржбрж╝рзБрждрзЗ рждрзБрж▓ржирж╛ ржХрж░рзБржи", 'suggestion_3': "ржЕрждрж┐рж░рж┐ржХрзНржд рж╢рзЛрж╖рж┐ржд ржЕржЮрзНржЪрж▓рзЗрж░ ржорж╛ржиржЪрж┐рждрзНрж░",
        'responses': [{"keywords": ["ржЕржмрж╕рзНржерж╛", "ржкрзБржирзЗ"], "response": "ржкрзБржирзЗрждрзЗ ржнрзВржЧрж░рзНржнрж╕рзНрже ржЬрж▓рзЗрж░ ржЕржмрж╕рзНржерж╛ 'ржЕрждрж┐рж░рж┐ржХрзНржд-рж╢рзЛрж╖рж┐ржд'ред LGD рж╣рж▓ 125%ред", "viz": {"type": "bar", "data": pd.DataFrame({"ржмрж┐ржнрж╛ржЧ": ['ржмрж╛рж░рзНрж╖рж┐ржХ рж░рж┐ржЪрж╛рж░рзНржЬ', 'ржмрж╛рж░рзНрж╖рж┐ржХ ржирж┐рж╖рзНржХрж╛рж╢ржи'], "ржорж╛ржи (BCM)": [1.2, 1.5]})}}]
    },
    'mr': {
        'page_title': "INGRES рд╕рд╛рдареА AI рд╡реНрд╣рд░реНрдЪреНрдпреБрдЕрд▓ рдЕрд╕рд┐рд╕реНрдЯрдВрдЯ", 'chat_title': 'рднреВрдЬрд▓ рдЕрдВрддрд░реНрджреГрд╖реНрдЯреА рдЪреЕрдЯрдмреЙрдЯ', 'suggestions_label': 'рд╣реЗ рдЙрджрд╛рд╣рд░рдг рд╡рд╛рдкрд░реВрди рдкрд╣рд╛:', 'placeholder': 'рднреВрдЬрд▓ рд╕рдВрд╕рд╛рдзрдирд╛рдВрдмрджреНрджрд▓ рд╡рд┐рдЪрд╛рд░рд╛...', 'welcome': "рдирдорд╕реНрдХрд╛рд░! рдореА INGRES рд╕рд╛рдареА рддреБрдордЪрд╛ AI рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ.", 'error': "рдХреНрд╖рдорд╕реНрд╡, рдорд▓рд╛ рддреНрдпрд╛ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд░рд╢реНрдирд╛рдЪреА рдорд╛рд╣рд┐рддреА рд╕рд╛рдкрдбрд▓реА рдирд╛рд╣реА.", 'viz_title': "рдбреЗрдЯрд╛ рд╡реНрд╣рд┐рдЬреНрдпреБрдЕрд▓рд╛рдпрдЭреЗрд╢рди", 'viz_placeholder': 'рдкрд░рд╕реНрдкрд░рд╕рдВрд╡рд╛рджреА рдЪрд╛рд░реНрдЯ рдЖрдгрд┐ рдирдХрд╛рд╢реЗ рдпреЗрдереЗ рджрд┐рд╕рддреАрд▓.', 'suggestion_1': "рдкреБрдгреЗ, рдорд╣рд╛рд░рд╛рд╖реНрдЯреНрд░рд╛рддреАрд▓ рд╕реНрдерд┐рддреА", 'suggestion_2': "рддрд╛рдорд┐рд│рдирд╛рдбреВрдордзреНрдпреЗ рддреБрд▓рдирд╛ рдХрд░рд╛", 'suggestion_3': "рдЕрддрд┐-рд╢реЛрд╖рд┐рдд рдХреНрд╖реЗрддреНрд░рд╛рдВрдЪрд╛ рдирдХрд╛рд╢рд╛",
        'responses': [{"keywords": ["рд╕реНрдерд┐рддреА", "рдкреБрдгреЗ"], "response": "рдкреБрдгреНрдпрд╛рддреАрд▓ рднреВрдЬрд▓ рд╕реНрдерд┐рддреА 'рдЕрддрд┐-рд╢реЛрд╖рд┐рдд' рдЖрд╣реЗ. LGD 125% рдЖрд╣реЗ.", "viz": {"type": "bar", "data": pd.DataFrame({"рд╢реНрд░реЗрдгреА": ['рд╡рд╛рд░реНрд╖рд┐рдХ рдкреБрдирд░реНрднрд░рдг', 'рд╡рд╛рд░реНрд╖рд┐рдХ рдХрд╛рдврдгреА'], "рдореВрд▓реНрдп (BCM)": [1.2, 1.5]})}}]
    },
    'gu': {
        'page_title': "INGRES ркорк╛ркЯрлЗ AI рк╡рк░рлНркЪрлНркпрлБркЕрк▓ рк╕рк╣рк╛ркпркХ", 'chat_title': 'ркнрлВркЧрк░рлНркнркЬрк│ ркЖркВркдрк░ркжрлГрк╖рлНркЯрк┐ ркЪрлЗркЯркмрлЛркЯ', 'suggestions_label': 'ркЖ ркЙркжрк╛рк╣рк░ркгрлЛ ркЕркЬркорк╛рк╡рлЛ:', 'placeholder': 'ркнрлВркЧрк░рлНркнркЬрк│ рк╕ркВрк╕рк╛ркзркирлЛ рк╡рк┐рк╢рлЗ рккрлВркЫрлЛ...', 'welcome': "ркиркорк╕рлНркдрлЗ! рк╣рлБркВ INGRES ркорк╛ркЯрлЗ ркдркорк╛рк░рлЛ AI рк╕рк╣рк╛ркпркХ ркЫрлБркВ.", 'error': "ркорк╛ркл ркХрк░рк╢рлЛ, ркоркирлЗ ркдрлЗ ркЪрлЛркХрлНркХрк╕ ркХрлНрк╡рлЗрк░рлА ркорк╛ркЯрлЗ ркорк╛рк╣рк┐ркдрлА ркорк│рлА ркиркерлА.", 'viz_title': "ркбрлЗркЯрк╛ рк╡рк┐ркЭрлНркпрлБрк▓рк╛ркЗркЭрлЗрк╢рки", 'viz_placeholder': 'ркЗркирлНркЯрк░рлЗркХрлНркЯрк┐рк╡ ркЪрк╛рк░рлНркЯрлНрк╕ ркЕркирлЗ ркиркХрк╢рк╛ ркЕрк╣рлАркВ ркжрлЗркЦрк╛рк╢рлЗ.', 'suggestion_1': "рккрлБркгрлЗ, ркорк╣рк╛рк░рк╛рк╖рлНркЯрлНрк░ркорк╛ркВ рк╕рлНркерк┐ркдрк┐", 'suggestion_2': "ркдркорк┐рк▓ркирк╛ркбрлБркорк╛ркВ рк╕рк░ркЦрк╛ркоркгрлА ркХрк░рлЛ", 'suggestion_3': "рк╡ркзрлБ-рк╢рлЛрк╖рк┐ркд ркЭрлЛркиркирлЛ ркиркХрк╢рлЛ",
        'responses': [{"keywords": ["рк╕рлНркерк┐ркдрк┐", "рккрлБркгрлЗ"], "response": "рккрлБркгрлЗркорк╛ркВ ркнрлВркЧрк░рлНркнркЬрк│ркирлА рк╕рлНркерк┐ркдрк┐ 'рк╡ркзрлБ-рк╢рлЛрк╖рк┐ркд' ркЫрлЗ. LGD 125% ркЫрлЗ.", "viz": {"type": "bar", "data": pd.DataFrame({"рк╢рлНрк░рлЗркгрлА": ['рк╡рк╛рк░рлНрк╖рк┐ркХ рк░рк┐ркЪрк╛рк░рлНркЬ', 'рк╡рк╛рк░рлНрк╖рк┐ркХ ркирк┐рк╖рлНркХрк░рлНрк╖ркг'], "ркорлВрк▓рлНркп (BCM)": [1.2, 1.5]})}}]
    },
    'kn': {
        'page_title': "INGRES р▓Чр▓╛р▓Чр▓┐ AI р▓╡р▓░р│Нр▓Ър│Бр▓╡р▓▓р│Н р▓╕р▓╣р▓╛р▓пр▓Х", 'chat_title': 'р▓Ер▓Вр▓др▓░р│Нр▓Ьр▓▓ р▓Тр▓│р▓ир│Лр▓Яр▓Чр▓│ р▓Ър▓╛р▓Яр│НтАМр▓мр▓╛р▓Яр│Н', 'suggestions_label': 'р▓И р▓Йр▓жр▓╛р▓╣р▓░р▓гр│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓кр│Нр▓░р▓пр▓др│Нр▓ир▓┐р▓╕р▓┐:', 'placeholder': 'р▓Ер▓Вр▓др▓░р│Нр▓Ьр▓▓ р▓╕р▓Вр▓кр▓ир│Нр▓ор│Вр▓▓р▓Чр▓│ р▓мр▓Чр│Нр▓Чр│Ж р▓Хр│Зр▓│р▓┐...', 'welcome': "р▓ир▓ор▓╕р│Нр▓Хр▓╛р▓░! р▓ир▓╛р▓ир│Б INGRES р▓Чр▓╛р▓Чр▓┐ р▓ир▓┐р▓ор│Нр▓о AI р▓╕р▓╣р▓╛р▓пр▓Х.", 'error': "р▓Хр│Нр▓╖р▓ор▓┐р▓╕р▓┐, р▓Ж р▓ир▓┐р▓░р│Нр▓жр▓┐р▓╖р│Нр▓Я р▓кр│Нр▓░р▓╢р│Нр▓ир│Жр▓Чр│Ж р▓ир▓ир▓Чр│Ж р▓ор▓╛р▓╣р▓┐р▓др▓┐ р▓╕р▓┐р▓Чр▓▓р▓┐р▓▓р│Нр▓▓.", 'viz_title': "р▓бр│Зр▓Яр▓╛ р▓жр│Гр▓╢р│Нр▓пр│Ар▓Хр▓░р▓гр▓Чр▓│р│Б", 'viz_placeholder': 'р▓╕р▓Вр▓╡р▓╛р▓жр▓╛р▓др│Нр▓ор▓Х р▓Ър▓╛р▓░р│Нр▓Яр│НтАМр▓Чр▓│р│Б р▓ор▓др│Нр▓др│Б р▓ир▓Хр│Нр▓╖р│Жр▓Чр▓│р│Б р▓Зр▓▓р│Нр▓▓р▓┐ р▓Хр▓╛р▓гр▓┐р▓╕р│Бр▓др│Нр▓др▓╡р│Ж.', 'suggestion_1': "р▓кр│Бр▓гр│Ж, р▓ор▓╣р▓╛р▓░р▓╛р▓╖р│Нр▓Яр│Нр▓░р▓жр▓▓р│Нр▓▓р▓┐ р▓╕р│Нр▓ер▓┐р▓др▓┐", 'suggestion_2': "р▓др▓ор▓┐р▓│р│Бр▓ир▓╛р▓бр▓┐р▓ир▓▓р│Нр▓▓р▓┐ р▓╣р│Лр▓▓р▓┐р▓Хр│Ж р▓ор▓╛р▓бр▓┐", 'suggestion_3': "р▓Ер▓др▓┐-р▓╢р│Лр▓╖р▓┐р▓д р▓╡р▓▓р▓пр▓Чр▓│ р▓ир▓Хр│Нр▓╖р│Ж",
        'responses': [{"keywords": ["р▓╕р│Нр▓ер▓┐р▓др▓┐", "р▓кр│Бр▓гр│Ж"], "response": "р▓кр│Бр▓гр│Жр▓пр▓▓р│Нр▓▓р▓┐ р▓Ер▓Вр▓др▓░р│Нр▓Ьр▓▓ р▓╕р│Нр▓ер▓┐р▓др▓┐ 'р▓Ер▓др▓┐-р▓╢р│Лр▓╖р▓┐р▓д'р▓╡р▓╛р▓Чр▓┐р▓жр│Ж. LGD 125% р▓Жр▓Чр▓┐р▓жр│Ж.", "viz": {"type": "bar", "data": pd.DataFrame({"р▓╡р▓░р│Нр▓Ч": ['р▓╡р▓╛р▓░р│Нр▓╖р▓┐р▓Х р▓ор▓░р│Бр▓кр│Вр▓░р▓г', 'р▓╡р▓╛р▓░р│Нр▓╖р▓┐р▓Х р▓╣р│Кр▓░р▓др│Жр▓Чр│Жр▓пр│Бр▓╡р▓┐р▓Хр│Ж'], "р▓ор│Мр▓▓р│Нр▓п (BCM)": [1.2, 1.5]})}}]
    },
    'ml': {
        'page_title': "INGRES-р┤ир┤╛р┤пр╡Бр┤│р╡Нр┤│ AI р┤╡р╡Жр╡╝р┤Ър╡Нр┤╡р╡╜ р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р╡Н", 'chat_title': 'р┤нр╡Вр┤Чр╡╝р┤нр┤Ьр┤▓ р┤Йр╡╛р┤Хр╡Нр┤Хр┤╛р┤┤р╡Нр┤Ър┤Хр╡╛ р┤Ър┤╛р┤▒р╡Нр┤▒р╡Нр┤мр╡Лр┤Яр╡Нр┤Яр╡Н', 'suggestions_label': 'р┤И р┤Йр┤жр┤╛р┤╣р┤░р┤гр┤Щр╡Нр┤Щр╡╛ р┤кр┤░р╡Ар┤Хр╡Нр┤╖р┤┐р┤Хр╡Нр┤Хр╡Бр┤Х:', 'placeholder': 'р┤нр╡Вр┤Чр╡╝р┤нр┤Ьр┤▓ р┤╡р┤┐р┤нр┤╡р┤Щр╡Нр┤Щр┤│р╡Жр┤Хр╡Нр┤Хр╡Бр┤▒р┤┐р┤Ър╡Нр┤Ър╡Н р┤Ър╡Лр┤жр┤┐р┤Хр╡Нр┤Хр╡Бр┤Х...', 'welcome': "р┤ир┤ор┤╕р╡Нр┤Хр┤╛р┤░р┤В! р┤Юр┤╛р╡╗ INGRES-р┤ир┤╛р┤пр╡Бр┤│р╡Нр┤│ р┤ир┤┐р┤Щр╡Нр┤Щр┤│р╡Бр┤Яр╡Ж AI р┤Ер┤╕р┤┐р┤╕р╡Нр┤▒р╡Нр┤▒р┤ир╡Нр┤▒р┤╛р┤гр╡Н.", 'error': "р┤Хр╡Нр┤╖р┤ор┤┐р┤Хр╡Нр┤Хр┤гр┤В, р┤Ж р┤кр╡Нр┤░р┤др╡Нр┤пр╡Зр┤Х р┤Ър╡Лр┤жр╡Нр┤пр┤др╡Нр┤др┤┐р┤ир╡Бр┤│р╡Нр┤│ р┤╡р┤┐р┤╡р┤░р┤Щр╡Нр┤Щр╡╛ р┤Хр┤гр╡Нр┤Яр╡Жр┤др╡Нр┤др┤╛р┤ир┤╛р┤пр┤┐р┤▓р╡Нр┤▓.", 'viz_title': "р┤бр┤╛р┤▒р╡Нр┤▒р┤╛ р┤╡р┤┐р┤╖р╡Нр┤╡р┤▓р╡Ир┤╕р╡Зр┤╖р┤ир╡Бр┤Хр╡╛", 'viz_placeholder': 'р┤╕р┤Вр┤╡р╡Зр┤жр┤ир┤╛р┤др╡Нр┤ор┤Х р┤Ър┤╛р╡╝р┤Яр╡Нр┤Яр╡Бр┤Хр┤│р╡Бр┤В р┤ор┤╛р┤кр╡Нр┤кр╡Бр┤Хр┤│р╡Бр┤В р┤Зр┤╡р┤┐р┤Яр╡Ж р┤жр╡Гр┤╢р╡Нр┤пр┤ор┤╛р┤Хр╡Бр┤В.', 'suggestion_1': "р┤кр╡Вр┤ир╡Ж, р┤ор┤╣р┤╛р┤░р┤╛р┤╖р╡Нр┤Яр╡Нр┤░р┤пр┤┐р┤▓р╡Ж р┤╕р╡Нр┤ер┤┐р┤др┤┐", 'suggestion_2': "р┤др┤ор┤┐р┤┤р╡Нр┤ир┤╛р┤Яр╡Нр┤Яр┤┐р╡╜ р┤др┤╛р┤░р┤др┤ор╡Нр┤пр┤В р┤Ър╡Жр┤пр╡Нр┤пр╡Бр┤Х", 'suggestion_3': "р┤Ер┤ор┤┐р┤др┤ор┤╛р┤пр┤┐ р┤Ър╡Вр┤╖р┤гр┤В р┤Ър╡Жр┤пр╡Нр┤пр┤кр╡Нр┤кр╡Жр┤Яр╡Нр┤Я р┤╕р╡Лр┤гр╡Бр┤Хр┤│р╡Бр┤Яр╡Ж р┤нр╡Вр┤кр┤Яр┤В",
        'responses': [{"keywords": ["р┤╕р╡Нр┤ер┤┐р┤др┤┐", "р┤кр╡Вр┤ир╡Ж"], "response": "р┤кр╡Вр┤ир╡Жр┤пр┤┐р┤▓р╡Ж р┤нр╡Вр┤Чр╡╝р┤нр┤Ьр┤▓р┤др╡Нр┤др┤┐р┤ир╡Нр┤▒р╡Ж р┤Ер┤╡р┤╕р╡Нр┤е 'р┤Ер┤ор┤┐р┤др┤ор┤╛р┤пр┤┐ р┤Ър╡Вр┤╖р┤гр┤В р┤Ър╡Жр┤пр╡Нр┤пр┤кр╡Нр┤кр╡Жр┤Яр╡Нр┤Я'р┤др┤╛р┤гр╡Н. LGD 125% р┤Жр┤гр╡Н.", "viz": {"type": "bar", "data": pd.DataFrame({"р┤╡р┤┐р┤нр┤╛р┤Чр┤В": ['р┤╡р┤╛р╡╝р┤╖р┤┐р┤Х р┤▒р╡Ар┤Ър┤╛р╡╝р┤Ьр╡Н', 'р┤╡р┤╛р╡╝р┤╖р┤┐р┤Х р┤╡р╡Зр╡╝р┤др┤┐р┤░р┤┐р┤Хр╡Нр┤Хр╡╜'], "р┤ор╡Вр┤▓р╡Нр┤пр┤В (BCM)": [1.2, 1.5]})}}]
    },
    'pa': {
        'page_title': "INGRES ри▓риИ AI ри╡ри░риЪрйБриЕри▓ риЕри╕ри┐ри╕риЯрйИриВриЯ", 'chat_title': 'ринрйВриорйАриЧрид рикри╛ригрйА рижрйА ри╕рйВриЭ риЪрйИриЯримрйЛриЯ', 'suggestions_label': 'риЗри╣ риЙрижри╛ри╣ри░ригри╛риВ риЕриЬри╝риори╛риУ:', 'placeholder': 'ринрйВриорйАриЧрид рикри╛ригрйА рижрйЗ ри╕ри░рйЛридри╛риВ римри╛ри░рйЗ рикрйБрй▒риЫрйЛ...', 'welcome': "ри╕рид ри╕рйНри░рйА риЕриХри╛ри▓! риорйИриВ INGRES ри▓риИ ридрйБри╣ри╛рибри╛ AI ри╕ри╣ри╛риЗриХ ри╣ри╛риВред", 'error': "риори╛рил риХри░риири╛, риорйИриирйВрй░ риЙри╕ риЦри╛ри╕ ри╕ри╡ри╛ри▓ ри▓риИ риЬри╛ригриХри╛ри░рйА риири╣рйАриВ риори┐ри▓рйАред", 'viz_title': "рибри╛риЯри╛ ри╡ри┐риЬри╝рйВриЕри▓ри╛риИриЬри╝рйЗри╕ри╝рии", 'viz_placeholder': 'риЗрй░риЯри░риРриХриЯри┐ри╡ риЪри╛ри░риЯ риЕридрйЗ риириХри╕ри╝рйЗ риЗрй▒риерйЗ рижри┐риЦри╛риИ рижрйЗригриЧрйЗред', 'suggestion_1': "рикрйБригрйЗ, риори╣ри╛ри░ри╛ри╕ри╝риЯри░ ри╡ри┐рй▒риЪ ри╕риери┐ридрйА", 'suggestion_2': "ридриори┐ри▓риири╛рибрйВ ри╡ри┐рй▒риЪ ридрйБри▓риири╛ риХри░рйЛ", 'suggestion_3': "ри╡рй▒риз-ри╕ри╝рйЛри╕ри╝ри┐рид риЦрйЗридри░ри╛риВ рижри╛ риириХри╕ри╝ри╛",
        'responses': [{"keywords": ["ри╕риери┐ридрйА", "рикрйБригрйЗ"], "response": "рикрйБригрйЗ ри╡ри┐рй▒риЪ ринрйВриорйАриЧрид рикри╛ригрйА рижрйА ри╕риери┐ридрйА 'ри╡рй▒риз-ри╕ри╝рйЛри╕ри╝ри┐рид' ри╣рйИред LGD 125% ри╣рйИред", "viz": {"type": "bar", "data": pd.DataFrame({"ри╕ри╝рйНри░рйЗригрйА": ['ри╕ри╛ри▓ри╛риири╛ ри░рйАриЪри╛ри░риЬ', 'ри╕ри╛ри▓ри╛риири╛ риХрй▒ривригри╛'], "риорйБрй▒ри▓ (BCM)": [1.2, 1.5]})}}]
    },
    'or': {
        'page_title': "INGRES рмкрм╛рмЗрмБ AI рмнрм░рнНрмЪрнБрмЖрм▓рнН рмЖрм╕рм┐рм╖рнНрмЯрм╛рмгрнНрмЯ", 'chat_title': 'рмнрнВрмдрм│ рмЬрм│ рмЕрмирнНрмдрм░рнНрмжрнГрм╖рнНрмЯрм┐ рмЪрм╛рмЯрнНтАМрммрмЯрнН', 'suggestions_label': 'рмПрм╣рм┐ рмЙрмжрм╛рм╣рм░рмгрмЧрнБрмбрм┐рмХ рмЪрнЗрм╖рнНрмЯрм╛ рмХрм░рмирнНрмдрнБ:', 'placeholder': 'рмнрнВрмдрм│ рмЬрм│ рм╕рморнНрмкрмж рммрм┐рм╖рнЯрм░рнЗ рмкрмЪрм╛рм░рмирнНрмдрнБ...', 'welcome': "рмирморм╕рнНрмХрм╛рм░! рморнБрмБ INGRES рмкрм╛рмЗрмБ рмЖрмкрмгрмЩрнНрмХрм░ AI рм╕рм╣рм╛рнЯрмХред", 'error': "рмХрнНрм╖рморм╛ рмХрм░рм┐рммрнЗ, рморнБрмБ рм╕рнЗрм╣рм┐ рмирм┐рм░рнНрмжрнНрмжрм┐рм╖рнНрмЯ рмкрнНрм░рм╢рнНрми рмкрм╛рмЗрмБ рм╕рнВрмЪрмирм╛ рмкрм╛рмЗрм▓рм┐ рмирм╛рм╣рм┐рмБред", 'viz_title': "рмбрм╛рмЯрм╛ рмнрм┐рмЬрнБрмЖрм▓рм╛рмЗрмЬрнЗрм╕рмирнН", 'viz_placeholder': 'рмЗрмгрнНрмЯрм░рм╛рмХрнНрмЯрм┐рмнрнН рмЪрм╛рм░рнНрмЯ рмПрммрмВ рморм╛рмирмЪрм┐рмдрнНрм░ рмПрмарм╛рм░рнЗ рмжрнЗрмЦрм╛рмпрм┐рммред', 'suggestion_1': "рмкрнБрмгрнЗ, рморм╣рм╛рм░рм╛рм╖рнНрмЯрнНрм░рм░рнЗ рм╕рнНрмерм┐рмдрм┐", 'suggestion_2': "рмдрм╛рморм┐рм▓рмирм╛рмбрнБрм░рнЗ рмдрнБрм│рмирм╛ рмХрм░рмирнНрмдрнБ", 'suggestion_3': "рмЕрмдрнНрнЯрмзрм┐рмХ-рм╢рнЛрм╖рм┐рмд рмЕрмЮрнНрмЪрм│рм░ рморм╛рмирмЪрм┐рмдрнНрм░",
        'responses': [{"keywords": ["рм╕рнНрмерм┐рмдрм┐", "рмкрнБрмгрнЗ"], "response": "рмкрнБрмгрнЗрм░рнЗ рмнрнВрмдрм│ рмЬрм│рм░ рм╕рнНрмерм┐рмдрм┐ 'рмЕрмдрнНрнЯрмзрм┐рмХ-рм╢рнЛрм╖рм┐рмд' рмЕрмЯрнЗред LGD 125% рмЕрмЯрнЗред", "viz": {"type": "bar", "data": pd.DataFrame({"рм╢рнНрм░рнЗрмгрнА": ['рммрм╛рм░рнНрм╖рм┐рмХ рм░рм┐рмЪрм╛рм░рнНрмЬ', 'рммрм╛рм░рнНрм╖рм┐рмХ рмирм┐рк╖рлНрмХрм╛рм╕рми'], "рморнВрм▓рнНрнЯ (BCM)": [1.2, 1.5]})}}]
    }
}


if 'messages' not in st.session_state: st.session_state.messages = []
if 'lang' not in st.session_state: st.session_state.lang = 'en'
if 'current_viz' not in st.session_state: st.session_state.current_viz = None

def t(key):
    return MOCK_DATA[st.session_state.lang].get(key, MOCK_DATA['en'].get(key, key))

# --- FEATURE: Onboarding Tutorial ---
if 'has_seen_tutorial' not in st.session_state:
    with st.expander("ЁЯСЛ Welcome! Here's how to use the Chatbot:", expanded=True):
        st.info("1. **Ask a question** in the text box at the bottom.")
        st.info("2. **Use the examples** below the chat for ideas.")
        st.info("3. **Interact with charts and maps** that appear on the right.")
        if st.button("Got it!"):
            st.session_state.has_seen_tutorial = True
            st.rerun()

# --- Header ---
col1, col2 = st.columns([3, 1])
with col1:
    st.markdown(f"""<h1 style="margin: 0; display: flex; align-items: center; gap: 15px;">
        <img src="https://placehold.co/60x60/3B82F6/FFFFFF?text=INGRES" style="border-radius: 50%;">
        {t('page_title')}</h1>""", unsafe_allow_html=True)
with col2:
    lang_options = list(LANGUAGES.values())
    current_lang_name = LANGUAGES[st.session_state.lang]
    selected_lang_index = lang_options.index(current_lang_name)
    lang_choice = st.selectbox("Language / рднрд╛рд╖рд╛", lang_options, index=selected_lang_index, label_visibility="collapsed")
    new_lang_code = next((code for code, name in LANGUAGES.items() if name == lang_choice), 'en')
    if new_lang_code != st.session_state.lang:
        st.session_state.lang = new_lang_code
        st.session_state.messages = []
        st.session_state.current_viz = None
        st.rerun()
st.markdown("<hr>", unsafe_allow_html=True)

# --- Main Content ---
chat_col, viz_col = st.columns(2)
with chat_col:
    st.header(t('chat_title'))
    chat_container = st.container(height=400, border=True)
    with chat_container:
        if not st.session_state.messages:
            with st.chat_message("assistant"):
                st.write(t('welcome'))
        
        for i, message in enumerate(st.session_state.messages):
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
                
                if message["role"] == "assistant" and i == len(st.session_state.messages) - 1:
                    feedback_cols = st.columns([1, 1, 8])
                    if feedback_cols[0].button("ЁЯСН", key=f"helpful_{i}"):
                        st.toast("Thanks for your feedback!")
                    if feedback_cols[1].button("ЁЯСО", key=f"unhelpful_{i}"):
                        st.toast("Thanks! We'll use this to improve.")

    st.write(t('suggestions_label'))
    s_col1, s_col2, s_col3 = st.columns(3)
    suggestion_buttons = {s_col1: t('suggestion_1'), s_col2: t('suggestion_2'), s_col3: t('suggestion_3')}
    user_prompt_suggestion = None
    for col, text in suggestion_buttons.items():
        if col.button(text, use_container_width=True):
            user_prompt_suggestion = text

with viz_col:
    viz_area = st.container(border=True)
    with viz_area:
        if st.session_state.current_viz is None:
            st.markdown(f"""<div style="text-align: center; padding: 5rem 1rem;">
                <span style="font-size: 4rem;">ЁЯУК</span><h3>{t('viz_title')}</h3><p>{t('viz_placeholder')}</p>
                </div>""", unsafe_allow_html=True)
        else:
            viz_type = st.session_state.current_viz['type']
            viz_data = st.session_state.current_viz['data']
            if viz_type == 'bar':
                st.bar_chart(viz_data, x='Category', y='Value (BCM)')
            elif viz_type == 'line':
                st.line_chart(viz_data, x="Year", y="Resources (BCM)")
            elif viz_type == 'map':
                st.map(viz_data, zoom=5, use_container_width=True)
            
            if isinstance(viz_data, pd.DataFrame):
                csv = viz_data.to_csv(index=False).encode('utf-8')
                st.download_button(
                   label="ЁЯУД Download Data as CSV",
                   data=csv,
                   file_name='ingres_data.csv',
                   mime='text/csv',
                   use_container_width=True,
                   key='download_button'
                )

def get_bot_response(query):
    query = query.lower()
    possible_responses = t('responses')
    if not possible_responses: return t('error'), None
    for item in possible_responses:
        if all(keyword.lower() in query for keyword in item["keywords"]):
            return item["response"], item.get("viz")
    return t('error'), None

prompt = st.chat_input(t('placeholder')) or user_prompt_suggestion

if prompt:
    st.session_state.messages.append({"role": "user", "content": prompt})
    response_text, viz_data = get_bot_response(prompt)
    st.session_state.current_viz = viz_data
    st.session_state.messages.append({"role": "assistant", "content": response_text})
    st.rerun()

st.markdown("<hr style='margin-top: 2rem;'>", unsafe_allow_html=True)
st.markdown("<p style='text-align: center; color: grey;'>┬й 2025 | Data Source: INGRES Portal</p>", unsafe_allow_html=True)
